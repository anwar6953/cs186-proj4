package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate m_p;
    private DbIterator m_child1;
    private DbIterator m_child2;
    private TupleDesc m_td;
    
    private static Tuple t1 = null;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	m_p = p;
    	m_child1 = child1;
    	m_child2 = child2;
    	m_td = TupleDesc.merge(m_child1.getTupleDesc(), m_child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return m_p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return m_child1.getTupleDesc().getFieldName(m_p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return m_child2.getTupleDesc().getFieldName(m_p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        m_td = TupleDesc.merge(m_child1.getTupleDesc(), m_child2.getTupleDesc());
        return m_td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	m_child1.open();
    	m_child2.open();
    	super.open();
    }

    public void close() {
        // some code goes here
    	m_child1.close();
    	m_child2.close();
    	super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	m_child1.rewind();
    	m_child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	//TODO: create a 'mergeTuples' function?
        while (m_child1.hasNext() || t1 != null) {
        	if (t1 == null){
        		if (m_child1.hasNext()){
        			t1 = m_child1.next();
        		} else {
        			return null;
        		}
        	}
            while (m_child2.hasNext()) {
            	Tuple t2 = m_child2.next();
            	if (m_p.filter(t1, t2)){
            		// Tuple t3 = new Tuple(getTupleDesc());
            		// TODO?: Set t3's record id.
            		
            		// Set t3's tuples as concatenation of t1,t2:
            		int t1Size = t1.getTupleDesc().numFields();
            		int t2Size = t2.getTupleDesc().numFields();
                    
                    m_td = TupleDesc.merge(m_child1.getTupleDesc(), m_child2.getTupleDesc());
            		Tuple t3 = new Tuple(getTupleDesc());

            		for (int i=0; i< t1Size; i++)
            			t3.setField(i, t1.getField(i));
            		for (int i=0; i< t2Size; i++){
                    //TODO:
                    //BUG:
                    //Likely, the issue is that one of the tuples in the child iterator has a different numFields.
                    System.out.println(this.hashCode());
                    System.out.println("num1: " + m_child1.getTupleDesc().numFields() + ", num2: " + m_child2.getTupleDesc().numFields() + ", t3: " + m_td.numFields());
                    System.out.println("num1: " + t1Size + ", num2: " + t2Size + ", t3: " + m_td.numFields());
                        System.out.println("iVal: " + (i + t1Size));
            			t3.setField(i + t1Size, t2.getField(i));
                    }
            		return t3;
            	}
            }
            m_child2.rewind();
            t1 = null;
            if (m_child1.hasNext())
            	t1 = m_child1.next();
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
    	return new DbIterator[] { this.m_child1, this.m_child2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	if (this.m_child1 != children[0])
    	{
    	    this.m_child1 = children[0];
    	}
    	if (this.m_child2 != children[1])
    	{
    	    this.m_child2 = children[1];
    	}
    }

}
